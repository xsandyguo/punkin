
#include "interpreter/interpreter.h"

#include <float.h>

typedef void (CPU::*ins_fun_ptr)(void);


ins_fun_ptr INSTRUCTION_FUNS [] = {
    &CPU::nop                  ,
    &CPU::aconst_null          ,
    &CPU::iconst_m1            ,
    &CPU::iconst_0             ,
    &CPU::iconst_1             ,
    &CPU::iconst_2             ,
    &CPU::iconst_3             ,
    &CPU::iconst_4             ,
    &CPU::iconst_5             ,
    &CPU::lconst_0             ,
    &CPU::lconst_1             ,
    &CPU::fconst_0             ,
    &CPU::fconst_1             ,
    &CPU::fconst_2             ,
    &CPU::dconst_0             ,
    &CPU::dconst_1             ,
    &CPU::bipush               ,
    &CPU::sipush               ,
    &CPU::ldc                  ,
    &CPU::ldc_w                ,
    &CPU::ldc2_w               ,
    &CPU::iload                ,
    &CPU::lload                ,
    &CPU::fload                ,
    &CPU::dload                ,
    &CPU::aload                ,
    &CPU::iload_0              ,
    &CPU::iload_1              ,
    &CPU::iload_2              ,
    &CPU::iload_3              ,
    &CPU::lload_0              ,
    &CPU::lload_1              ,
    &CPU::lload_2              ,
    &CPU::lload_3              ,
    &CPU::fload_0              ,
    &CPU::fload_1              ,
    &CPU::fload_2              ,
    &CPU::fload_3              ,
    &CPU::dload_0              ,
    &CPU::dload_1              ,
    &CPU::dload_2              ,
    &CPU::dload_3              ,
    &CPU::aload_0              ,
    &CPU::aload_1              ,
    &CPU::aload_2              ,
    &CPU::aload_3              ,
    &CPU::iaload               ,
    &CPU::laload               ,
    &CPU::faload               ,
    &CPU::daload               ,
    &CPU::aaload               ,
    &CPU::baload               ,
    &CPU::caload               ,
    &CPU::saload               ,
    &CPU::istore               ,
    &CPU::lstore               ,
    &CPU::fstore               ,
    &CPU::dstore               ,
    &CPU::astore               ,
    &CPU::istore_0             ,
    &CPU::istore_1             ,
    &CPU::istore_2             ,
    &CPU::istore_3             ,
    &CPU::lstore_0             ,
    &CPU::lstore_1             ,
    &CPU::lstore_2             ,
    &CPU::lstore_3             ,
    &CPU::fstore_0             ,
    &CPU::fstore_1             ,
    &CPU::fstore_2             ,
    &CPU::fstore_3             ,
    &CPU::dstore_0             ,
    &CPU::dstore_1             ,
    &CPU::dstore_2             ,
    &CPU::dstore_3             ,
    &CPU::astore_0             ,
    &CPU::astore_1             ,
    &CPU::astore_2             ,
    &CPU::astore_3             ,
    &CPU::iastore              ,
    &CPU::lastore              ,
    &CPU::fastore              ,
    &CPU::dastore              ,
    &CPU::aastore              ,
    &CPU::bastore              ,
    &CPU::castore              ,
    &CPU::sastore              ,
    &CPU::pop                  ,
    &CPU::pop2                 ,
    &CPU::dup                  ,
    &CPU::dup_x1               ,
    &CPU::dup_x2               ,
    &CPU::dup2                 ,
    &CPU::dup2_x1              ,
    &CPU::dup2_x2              ,
    &CPU::swap                 ,
    &CPU::iadd                 ,
    &CPU::ladd                 ,
    &CPU::fadd                 ,
    &CPU::dadd                 ,
    &CPU::isub                 ,
    &CPU::lsub                 ,
    &CPU::fsub                 ,
    &CPU::dsub                 ,
    &CPU::imul                 ,
    &CPU::lmul                 ,
    &CPU::fmul                 ,
    &CPU::dmul                 ,
    &CPU::idiv                 ,
    &CPU::ldiv                 ,
    &CPU::fdiv                 ,
    &CPU::ddiv                 ,
    &CPU::irem                 ,
    &CPU::lrem                 ,
    &CPU::frem                 ,
    &CPU::drem                 ,
    &CPU::ineg                 ,
    &CPU::lneg                 ,
    &CPU::fneg                 ,
    &CPU::dneg                 ,
    &CPU::ishl                 ,
    &CPU::lshl                 ,
    &CPU::ishr                 ,
    &CPU::lshr                 ,
    &CPU::iushr                ,
    &CPU::lushr                ,
    &CPU::iand                 ,
    &CPU::land                 ,
    &CPU::ior                  ,
    &CPU::lor                  ,
    &CPU::ixor                 ,
    &CPU::lxor                 ,
    &CPU::iinc                 ,
    &CPU::i2l                  ,
    &CPU::i2f                  ,
    &CPU::i2d                  ,
    &CPU::l2i                  ,
    &CPU::l2f                  ,
    &CPU::l2d                  ,
    &CPU::f2i                  ,
    &CPU::f2l                  ,
    &CPU::f2d                  ,
    &CPU::d2i                  ,
    &CPU::d2l                  ,
    &CPU::d2f                  ,
    &CPU::i2b                  ,
    &CPU::i2c                  ,
    &CPU::i2s                  ,
    &CPU::lcmp                 ,
    &CPU::fcmpl                ,
    &CPU::fcmpg                ,
    &CPU::dcmpl                ,
    &CPU::dcmpg                ,
    &CPU::ifeq                 ,
    &CPU::ifne                 ,
    &CPU::iflt                 ,
    &CPU::ifge                 ,
    &CPU::ifgt                 ,
    &CPU::ifle                 ,
    &CPU::if_icmpeq            ,
    &CPU::if_icmpne            ,
    &CPU::if_icmplt            ,
    &CPU::if_icmpge            ,
    &CPU::if_icmpgt            ,
    &CPU::if_icmple            ,
    &CPU::if_acmpeq            ,
    &CPU::if_acmpne            ,
    &CPU::goto0                 ,
    &CPU::jsr                  ,
    &CPU::ret                  ,
    &CPU::tableswitch          ,
    &CPU::lookupswitch         ,
    &CPU::ireturn              ,
    &CPU::lreturn              ,
    &CPU::freturn              ,
    &CPU::dreturn              ,
    &CPU::areturn              ,
    &CPU::return0               ,
    &CPU::getstatic            ,
    &CPU::putstatic            ,
    &CPU::getfield             ,
    &CPU::putfield             ,
    &CPU::invokevirtual        ,
    &CPU::invokespecial        ,
    &CPU::invokestatic         ,
    &CPU::invokeinterface      ,
    &CPU::new0                  ,
    &CPU::newarray             ,
    &CPU::anewarray            ,
    &CPU::arraylength          ,
    &CPU::athrow               ,
    &CPU::checkcast            ,
    &CPU::instanceof           ,
    &CPU::monitorenter         ,
    &CPU::monitorexit          ,
    &CPU::wide                 ,
    &CPU::multianewarray       ,
    &CPU::ifnull               ,
    &CPU::ifnonnull            ,
    &CPU::goto_w               ,
 &CPU::jsr_w

};


void CPU::Execute(Method* method){ 
    while(has_more_code()){ 
        byte code = next_byte();

        ins_fun_ptr fun = INSTRUCTION_FUNS[code];
        
        CPU& me = *this; 
        
        (me.*fun)(); 
    }
}